@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}
@{
    Layout = "~/_loginMaster.cshtml";
    Page.Title = "Log in";

    // Initialize general page variables
    var email = "";
    var password = "";
    var rememberMe = false;

    var returnUrl = Request.QueryString["ReturnUrl"];
    if (returnUrl.IsEmpty())
    {
        // Some external login providers always require a return URL value
        returnUrl = Href("~/Members/editpages.cshtml"); //here is where I can change my
    }

    // Setup validation
    Validation.RequireField("email", "You must specify an email address.");
    Validation.RequireField("password", "You must specify a password.");
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Password must be at least 6 characters"));

    // If this is a POST request, validate and process data
    if (IsPost)
    {
        AntiForgery.Validate();
        // is this an external login request?
        string provider = Request.Form["provider"];
        if (!provider.IsEmpty())
        {
            OAuthWebSecurity.RequestAuthentication(provider, Href("~/Account/RegisterService", new { returnUrl }));
            return;
        }
        else if (Validation.IsValid())
        {
            email = Request.Form["email"];
            password = Request.Form["password"];
            rememberMe = Request.Form["rememberMe"].AsBool();

            if (WebSecurity.UserExists(email) && WebSecurity.GetPasswordFailuresSinceLastSuccess(email) > 4 && WebSecurity.GetLastPasswordFailureDate(email).AddSeconds(60) > DateTime.UtcNow)
            {
                Response.Redirect("~/Account/AccountLockedOut");
                return;
            }

            // Attempt to log in using provided credentials
            if (WebSecurity.Login(email, password, rememberMe))
            {
                Context.RedirectLocal(returnUrl);
                return;
            }
            else
            {
                ModelState.AddFormError("The user name or password provided is incorrect.");
            }
        }
    }
}

<div class="main-container">
    <section id="loginForm" class="no-pad login-page fullscreen-element">
        <div class="background-image-holder">
            <img class="background-image" alt="Poster Image For Mobiles" src="~/img/hero6.jpg">
        </div>
        <div class="container align-vertical">
            <div class="row">
                <div class="col-md-4 col-md-offset-4 col-sm-6 col-sm-offset-3 text-center">
                    <p class="text-white">Restricted For Administrators Only...</p>
                </div>
            </div><!--end of row-->

            <div class="row">
                <div class="col-md-4 col-md-offset-4 col-sm-6 col-sm-offset-3 text-center">
                    <h1 class="text-white">Login to continue</h1>
                    <div class="photo-form-wrapper clearfix">
                        <form method="post">
                            @AntiForgery.GetHtml()
                            @* If one or more validation errors exist, show an error *@
                            @Html.ValidationSummary("Log in was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)
                            <label for="email" @if (!ModelState.IsValidField("email")) { <text> class="error-label" </text> }></label>
                            <span id="testing"> @Html.ValidationMessage("email") </span>
                            <input type="email" id="email" name="email" placeholder="Email Address" value="@email" @Validation.For("email") />
                            <label for="password" @if (!ModelState.IsValidField("password")) { <text> class="error-label" </text> }></label>
                            <span id="testing"> @Html.ValidationMessage("password") </span>
                            <input type="password" id="password" name="password" placeholder="Password" @Validation.For("password") />

                            <input class="login-btn btn-filled" type="submit" value="Log in" />
                        </form>
                    </div>
                    <a href="~/Account/Register" class="text-white">Create an account ➞</a><br>
                    <a href="~/Account/ForgotPassword" class="text-white">I've forgotten my password</a>
                </div>
            </div>
        </div>
    </section>
</div>

